name: Close Pull Request
# only trigger on pull request closed events
on:
  pull_request:
    types: [ closed ]

env:
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
  GOOGLE_REGION: ${{ secrets.GOOGLE_REGION }}
  GOOGLE_ZONE: ${{ secrets.GOOGLE_ZONE }}

jobs:
  close_job:
    # this job will run if PR is closed
    name: Destroy resources from Private TCP Active/Active and Delete Terraform Workspace for merged PR
    if: github.event.pull_request.merged == true || github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ./tests/private-tcp-active-active
      PR_NUMBER: ${{ github.event.pull_request.number }}
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

    # Checkout the branch of the pull request being tested
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      # Set the terraform env
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}
          terraform_version: 1.0.11
          terraform_wrapper: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@62d4898025f6041e16b1068643bfc5a696863587 # v1.1.0
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

    # this step will check if workspace is created for google-private-tcp-active-active for this PR
      - name: Check if workspace for google-private-tcp-active-active exists
        id: check-workspaces-google-private-tcp-active-active
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: >-
          echo "::set-output name=WORSPACE_TCP_AA_EXISTS::$(curl -s --header "Authorization: Bearer ${{env.TFC_TOKEN}}" --header "Content-Type: application/vnd.api+json"  https://app.terraform.io/api/v2/organizations/${{env.TFC_ORGANIZATION}}/workspaces/google-private-tcp-active-active-${{ env.PR_NUMBER }} | jq -r '.data | .attributes | .name')"
        env:
          TFC_ORGANIZATION: ${{ secrets.TFC_ORGANIZATION }}
          TFC_TOKEN: ${{ secrets.TFC_TOKEN }}

    # Configure backend 
      - name: Configure Terraform Backend
        if: ${{ steps.check-workspaces-google-private-tcp-active-active.outputs.WORSPACE_TCP_AA_EXISTS }}
        id: backend-config
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          TFC_ORGANIZATION: ${{ secrets.TFC_ORGANIZATION }}
        run: |
          cat <<EOF > backend-config.hcl
            organization = "$TFC_ORGANIZATION"
            workspaces {
              name = "google-private-tcp-active-active-${{ env.PR_NUMBER }}"
            }
          EOF
          
    # Initialize terraform
      - name: Terraform Init
        if: ${{ steps.check-workspaces-google-private-tcp-active-active.outputs.WORSPACE_TCP_AA_EXISTS }}
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -backend-config=backend-config.hcl -input=false -no-color
        
    # Write tfvars
      - name: Write Terraform Variables
        if: ${{ steps.check-workspaces-google-private-tcp-active-active.outputs.WORSPACE_TCP_AA_EXISTS }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          TFE_HOSTNAME: ${{ secrets.TFE_HOSTNAME }}
          TFE_ORGANIZATION: ${{ secrets.TFE_ORGANIZATION }}
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          TFE_WORKSPACE: ${{ secrets.TFE_WORKSPACE }}
        run: |
          cat <<EOF > github.auto.tfvars
          existing_service_account_id = "$GOOGLE_SERVICE_ACCOUNT"
          tfe = {
            hostname     = "$TFE_HOSTNAME"
            organization = "$TFE_ORGANIZATION"
            token        = "$TFE_TOKEN"
            workspace    = "$TFE_WORKSPACE"
          }
          EOF

    # this step will delete workspace-resources if exists for this PR
      - name: Terraform Destroy
        id: destroy-ptaa
        if: ${{ steps.check-workspaces-google-private-tcp-active-active.outputs.WORSPACE_TCP_AA_EXISTS }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

    # this step will delete workspace for this PR
      - name: Terraform Delete Workspace
        id: destroy-workspace-ptaa
        if: ${{ steps.check-workspaces-google-private-tcp-active-active.outputs.WORSPACE_TCP_AA_EXISTS }} && ${{ steps.destroy.outcome == 'success' }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          TFC_ORGANIZATION: ${{ secrets.TFC_ORGANIZATION }}
          TFC_TOKEN: ${{ secrets.TFC_TOKEN }}
        run: >-
          curl --header "Authorization: Bearer ${{env.TFC_TOKEN}}" --header "Content-Type: application/vnd.api+json" --request DELETE https://app.terraform.io/api/v2/organizations/${{env.TFC_ORGANIZATION}}/workspaces/google-private-tcp-active-active-${{ env.PR_NUMBER }}
          

