name: Close Pull Request
# only trigger on pull request closed events
on:
  pull_request:
    types: [ closed ]
jobs:
  merge_job:
    # this job will only run if the PR has been merged
    name: Destroy resources from Private TCP Active/Active and Delete Terraform Workspace for merged PR
    if: github.event.pull_request.merged == true || github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ./tests/private-tcp-active-active
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
    # Checkout the branch of the pull request being tested
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false
    # Set the source of module
      - name: Set Terraform Module Source
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          LOGIN: ${{ github.event.pull_request.head.repo.owner.login }}
          NAME: ${{ github.event.pull_request.head.repo.name }}
          SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          sed --in-place "s/source = \"..\/..\"/source = \"github.com\/$LOGIN\/$NAME?ref=$SHA\"/" main.tf
          sed --in-place "s/source = \"..\/..\/fixtures\/test_proxy\"/source = \"github.com\/$LOGIN\/$NAME\/\/fixtures\/test_proxy?ref=$SHA\"/" main.tf
    # Set the terraform env
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}
          terraform_version: 1.0.11
          terraform_wrapper: true
    # Configure backend 
      - name: Configure Terraform Backend
        id: backend-config
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          TFC_ORGANIZATION: ${{ secrets.TFC_ORGANIZATION }}
        run: |
          cat <<EOF > backend-config.hcl
            organization = "$TFC_ORGANIZATION"
            workspaces {
              name = "google-private-tcp-active-active-${{ github.event.pull_request.number }}"
            }
          EOF
    # Initialize terraform
      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -backend-config=backend-config.hcl -input=false -no-color
    # Write tfvars
      - name: Write Terraform Variables
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
          GOOGLE_REGION: ${{ secrets.GOOGLE_REGION }}
          GOOGLE_ZONE: ${{ secrets.GOOGLE_ZONE }}
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          TFE_HOSTNAME: ${{ secrets.TFE_HOSTNAME }}
          TFE_ORGANIZATION: ${{ secrets.TFE_ORGANIZATION }}
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          TFE_WORKSPACE: ${{ secrets.TFE_WORKSPACE }}
        run: |
          cat <<EOF > github.auto.tfvars
          google = {
            credentials     = <<-EOC
            $GOOGLE_CREDENTIALS
            EOC
            project         = "$GOOGLE_PROJECT"
            region          = "$GOOGLE_REGION"
            zone            = "$GOOGLE_ZONE"
            service_account = "$GOOGLE_SERVICE_ACCOUNT"
          }
          tfe = {
            hostname     = "$TFE_HOSTNAME"
            organization = "$TFE_ORGANIZATION"
            token        = "$TFE_TOKEN"
            workspace    = "$TFE_WORKSPACE"
          }
          EOF
    # this step will get the workspace created for google-private-tcp-active-active for this PR
      - name: Get workspace for google-private-tcp-active-active
        id: get-workspaces-google-private-tcp-active-active
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: >-
          echo "::set-output name=WORSPACE_TCP_AA::$(terraform workspace list -input=false -no-color | grep google-private-tcp-active-active-${{ github.event.pull_request.number }})"

          echo "::set-output name=WORSPACE_TCP_AA_EXISTS::$(terraform workspace list -input=false -no-color | grep -cx google-private-tcp-active-active-${{ github.event.pull_request.number }})"
    # this step will delete resources if workspace exists for this PR
      - name: Terraform Destroy
        id: destroy
        if: steps.get-workspaces-google-private-tcp-active-active.outputs.WORSPACE_TCP_AA_EXISTS == '1'
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color
    # this step will delete workspace for this PR
      - name: Terraform Delete Workspace
        id: destroy-workspace
        if: steps.get-workspaces-google-private-tcp-active-active.outputs.WORSPACE_TCP_AA_EXISTS == '1' && steps.destroy.outcome == 'success'
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          TFE_HOSTNAME: ${{ secrets.TFE_HOSTNAME }}
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
        run: terraform workspace delete "${{ steps.get-workspaces-google-private-tcp-active-active.outputs.WORSPACE_TCP_AA }}" -no-color
   
