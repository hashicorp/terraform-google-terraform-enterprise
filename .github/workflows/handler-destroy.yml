name: Pull Request Destroy Handler

on:
  repository_dispatch:
    types:
      - destroy-command

env:
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
  GOOGLE_REGION: ${{ secrets.GOOGLE_REGION }}
  GOOGLE_ZONE: ${{ secrets.GOOGLE_ZONE }}

jobs:
  public_active_active:
    name: Destroy resources from Public Active/Active
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'public-active-active') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ./tests/public-active-active
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

      - name: Checkout Pull Request Branch
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Set Terraform Module Source
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          LOGIN: ${{ github.event.client_payload.pull_request.head.repo.owner.login }}
          NAME: ${{ github.event.client_payload.pull_request.head.repo.name }}
          SHA: ${{ github.event.client_payload.pull_request.head.sha }}
        run: |
          sed --in-place "s/source = \"..\/..\"/source = \"github.com\/$LOGIN\/$NAME?ref=$SHA\"/" main.tf
          sed --in-place "s/source = \"..\/..\/fixtures\/test_proxy\"/source = \"github.com\/$LOGIN\/$NAME\/\/fixtures\/test_proxy?ref=$SHA\"/" main.tf

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}
          terraform_version: 1.0.11
          terraform_wrapper: false

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@62d4898025f6041e16b1068643bfc5a696863587 # v1.1.0
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Terraform Backend
        id: backend-config
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          TFC_ORGANIZATION: ${{ secrets.TFC_ORGANIZATION }}
        run: |
          cat <<EOF > backend-config.hcl
            organization = "$TFC_ORGANIZATION"
            workspaces {
              name = "google-public-active-active-${{ github.event.client_payload.github.payload.issue.number }}"
            }
          EOF

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -backend-config=backend-config.hcl -input=false -no-color

      - name: Write Terraform Variables
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          TFE_HOSTNAME: ${{ secrets.TFE_HOSTNAME }}
          TFE_ORGANIZATION: ${{ secrets.TFE_ORGANIZATION }}
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          TFE_WORKSPACE: ${{ secrets.TFE_WORKSPACE }}
        run: |
          cat <<EOF > github.auto.tfvars
          existing_service_account_id = "$GOOGLE_SERVICE_ACCOUNT"
          tfe = {
            hostname     = "$TFE_HOSTNAME"
            organization = "$TFE_ORGANIZATION"
            token        = "$TFE_TOKEN"
            workspace    = "$TFE_WORKSPACE"
          }
          EOF

      - name: Terraform Destroy
        id: destroy
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

      - name: Update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@3383acd359705b10cb1eeef05c0e88c056ea4666 # v3.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            ${{ format('### {0} Terraform Public Active/Active Destruction Report', job.status == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format(':link: [Action Summary Page]({0})', steps.vars.outputs.run-url) }}

            ${{ format('- {0} Terraform Init', steps.init.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Destroy', steps.destroy.outcome == 'success' && ':white_check_mark:' || ':x:') }}

  private_active_active:
    name: Destroy resources from Private Active/Active
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'private-active-active') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ./tests/private-active-active
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

      - name: Checkout Pull Request Branch
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Set Terraform Module Source
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          LOGIN: ${{ github.event.client_payload.pull_request.head.repo.owner.login }}
          NAME: ${{ github.event.client_payload.pull_request.head.repo.name }}
          SHA: ${{ github.event.client_payload.pull_request.head.sha }}
        run: |
          sed --in-place "s/source = \"..\/..\"/source = \"github.com\/$LOGIN\/$NAME?ref=$SHA\"/" main.tf
          sed --in-place "s/source = \"..\/..\/fixtures\/test_proxy\"/source = \"github.com\/$LOGIN\/$NAME\/\/fixtures\/test_proxy?ref=$SHA\"/" main.tf

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}
          terraform_version: 1.0.11
          terraform_wrapper: false

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@62d4898025f6041e16b1068643bfc5a696863587 # v1.1.0
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Terraform Backend
        id: backend-config
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          TFC_ORGANIZATION: ${{ secrets.TFC_ORGANIZATION }}
        run: |
          cat <<EOF > backend-config.hcl
            organization = "$TFC_ORGANIZATION"
            workspaces {
              name = "google-private-active-active-${{ github.event.client_payload.github.payload.issue.number }}"
            }
          EOF

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -backend-config=backend-config.hcl -input=false -no-color

      - name: Write Terraform Variables
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          TFE_HOSTNAME: ${{ secrets.TFE_HOSTNAME }}
          TFE_ORGANIZATION: ${{ secrets.TFE_ORGANIZATION }}
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          TFE_WORKSPACE: ${{ secrets.TFE_WORKSPACE }}
        run: |
          cat <<EOF > github.auto.tfvars
          existing_service_account_id = "$GOOGLE_SERVICE_ACCOUNT"
          tfe = {
            hostname     = "$TFE_HOSTNAME"
            organization = "$TFE_ORGANIZATION"
            token        = "$TFE_TOKEN"
            workspace    = "$TFE_WORKSPACE"
          }
          EOF

      - name: Terraform Destroy
        id: destroy
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

      - name: Update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@3383acd359705b10cb1eeef05c0e88c056ea4666 # v3.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            ${{ format('### {0} Terraform Private Active/Active Destruction Report', job.status == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format(':link: [Action Summary Page]({0})', steps.vars.outputs.run-url) }}

            ${{ format('- {0} Terraform Init', steps.init.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Destroy', steps.destroy.outcome == 'success' && ':white_check_mark:' || ':x:') }}

  private_tcp_active_active:
    name: Destroy resources from Private TCP Active/Active
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'private-tcp-active-active') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ./tests/private-tcp-active-active
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

      # Checkout the branch of the pull request being tested
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Set Terraform Module Source
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          LOGIN: ${{ github.event.client_payload.pull_request.head.repo.owner.login }}
          NAME: ${{ github.event.client_payload.pull_request.head.repo.name }}
          SHA: ${{ github.event.client_payload.pull_request.head.sha }}
        run: |
          sed --in-place "s/source = \"..\/..\"/source = \"github.com\/$LOGIN\/$NAME?ref=$SHA\"/" main.tf
          sed --in-place "s/source = \"..\/..\/fixtures\/test_proxy\"/source = \"github.com\/$LOGIN\/$NAME\/\/fixtures\/test_proxy?ref=$SHA\"/" main.tf

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}
          terraform_version: 1.0.11
          terraform_wrapper: false

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@62d4898025f6041e16b1068643bfc5a696863587 # v1.1.0
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Terraform Backend
        id: backend-config
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          TFC_ORGANIZATION: ${{ secrets.TFC_ORGANIZATION }}
        run: |
          cat <<EOF > backend-config.hcl
            organization = "$TFC_ORGANIZATION"
            workspaces {
              name = "google-private-tcp-active-active-${{ github.event.client_payload.github.payload.issue.number }}"
            }
          EOF

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -backend-config=backend-config.hcl -input=false -no-color

      - name: Write Terraform Variables
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          TFE_HOSTNAME: ${{ secrets.TFE_HOSTNAME }}
          TFE_ORGANIZATION: ${{ secrets.TFE_ORGANIZATION }}
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          TFE_WORKSPACE: ${{ secrets.TFE_WORKSPACE }}
        run: |
          cat <<EOF > github.auto.tfvars
          existing_service_account_id = "$GOOGLE_SERVICE_ACCOUNT"
          tfe = {
            hostname     = "$TFE_HOSTNAME"
            organization = "$TFE_ORGANIZATION"
            token        = "$TFE_TOKEN"
            workspace    = "$TFE_WORKSPACE"
          }
          EOF

      - name: Terraform Destroy
        id: destroy
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

      - name: Update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@3383acd359705b10cb1eeef05c0e88c056ea4666 # v3.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            ${{ format('### {0} Terraform Private TCP Active/Active Destruction Report', job.status == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format(':link: [Action Summary Page]({0})', steps.vars.outputs.run-url) }}

            ${{ format('- {0} Terraform Init', steps.init.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Destroy', steps.destroy.outcome == 'success' && ':white_check_mark:' || ':x:') }}

  standalone_external_rhel8_worker:
    name: Destroy resources from Standalone External Rhel8 Worker
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'standalone-external-rhel8-worker') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ./tests/standalone-external-rhel8-worker
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

      # Checkout the branch of the pull request being tested
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Set Terraform Module Source
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          LOGIN: ${{ github.event.client_payload.pull_request.head.repo.owner.login }}
          NAME: ${{ github.event.client_payload.pull_request.head.repo.name }}
          SHA: ${{ github.event.client_payload.pull_request.head.sha }}
        run: |
          sed --in-place "s/source = \"..\/..\"/source = \"github.com\/$LOGIN\/$NAME?ref=$SHA\"/" main.tf
          sed --in-place "s/source = \"..\/..\/fixtures\/test_proxy\"/source = \"github.com\/$LOGIN\/$NAME\/\/fixtures\/test_proxy?ref=$SHA\"/" main.tf

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}
          terraform_version: 1.0.11
          terraform_wrapper: false

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@62d4898025f6041e16b1068643bfc5a696863587 # v1.1.0
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Terraform Backend
        id: backend-config
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          TFC_ORGANIZATION: ${{ secrets.TFC_ORGANIZATION }}
        run: |
          cat <<EOF > backend-config.hcl
            organization = "$TFC_ORGANIZATION"
            workspaces {
              name = "google-standalone-external-rhel8-worker-${{ github.event.client_payload.github.payload.issue.number }}"
            }
          EOF

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -backend-config=backend-config.hcl -input=false -no-color

      - name: Write Terraform Variables
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          TFE_HOSTNAME: ${{ secrets.TFE_HOSTNAME }}
          TFE_ORGANIZATION: ${{ secrets.TFE_ORGANIZATION }}
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          TFE_WORKSPACE: ${{ secrets.TFE_WORKSPACE }}
        run: |
          cat <<EOF > github.auto.tfvars
          existing_service_account_id = "$GOOGLE_SERVICE_ACCOUNT"
          license_file = ""
          tfe = {
            hostname     = "$TFE_HOSTNAME"
            organization = "$TFE_ORGANIZATION"
            token        = "$TFE_TOKEN"
            workspace    = "$TFE_WORKSPACE"
          }
          EOF

      - name: Terraform Destroy
        id: destroy
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

      - name: Update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@3383acd359705b10cb1eeef05c0e88c056ea4666 # v3.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            ${{ format('### {0} Terraform Standalone External Rhel8 Worker Destruction Report', job.status == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format(':link: [Action Summary Page]({0})', steps.vars.outputs.run-url) }}

            ${{ format('- {0} Terraform Init', steps.init.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Destroy', steps.destroy.outcome == 'success' && ':white_check_mark:' || ':x:') }}

standalone_mounted_disk:
    name: Destroy resources from Standalone Mounted Disk
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'standalone-mounted-disk') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ./tests/standalone-mounted-disk
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

      # Checkout the branch of the pull request being tested
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Set Terraform Module Source
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          LOGIN: ${{ github.event.client_payload.pull_request.head.repo.owner.login }}
          NAME: ${{ github.event.client_payload.pull_request.head.repo.name }}
          SHA: ${{ github.event.client_payload.pull_request.head.sha }}
        run: |
          sed --in-place "s/source = \"..\/..\"/source = \"github.com\/$LOGIN\/$NAME?ref=$SHA\"/" main.tf
          sed --in-place "s/source = \"..\/..\/fixtures\/test_proxy\"/source = \"github.com\/$LOGIN\/$NAME\/\/fixtures\/test_proxy?ref=$SHA\"/" main.tf

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}
          terraform_version: 1.0.11
          terraform_wrapper: false

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@62d4898025f6041e16b1068643bfc5a696863587 # v1.1.0
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Terraform Backend
        id: backend-config
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          TFC_ORGANIZATION: ${{ secrets.TFC_ORGANIZATION }}
        run: |
          cat <<EOF > backend-config.hcl
            organization = "$TFC_ORGANIZATION"
            workspaces {
              name = "google-standalone-mounted-disk-${{ github.event.client_payload.github.payload.issue.number }}"
            }
          EOF

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -backend-config=backend-config.hcl -input=false -no-color

      - name: Write Terraform Variables
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          TFE_HOSTNAME: ${{ secrets.TFE_HOSTNAME }}
          TFE_ORGANIZATION: ${{ secrets.TFE_ORGANIZATION }}
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          TFE_WORKSPACE: ${{ secrets.TFE_WORKSPACE }}
        run: |
          cat <<EOF > github.auto.tfvars
          existing_service_account_id = "$GOOGLE_SERVICE_ACCOUNT"
          license_file = ""
          tfe = {
            hostname     = "$TFE_HOSTNAME"
            organization = "$TFE_ORGANIZATION"
            token        = "$TFE_TOKEN"
            workspace    = "$TFE_WORKSPACE"
          }
          EOF

      - name: Terraform Destroy
        id: destroy
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

      - name: Update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@3383acd359705b10cb1eeef05c0e88c056ea4666 # v3.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            ${{ format('### {0} Terraform Standalone Mounted Disk Destruction Report', job.status == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format(':link: [Action Summary Page]({0})', steps.vars.outputs.run-url) }}

            ${{ format('- {0} Terraform Init', steps.init.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Destroy', steps.destroy.outcome == 'success' && ':white_check_mark:' || ':x:') }}
